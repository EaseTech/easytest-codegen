#
#   This file is part of  EasyTest CodeGen, a project to generate 
#   JUnit test cases  from source code in EasyTest Template format and  helping to keep them in sync
#   during refactoring.
# 	EasyTest CodeGen, a tool provided by
#		EaseTech Organization Under Apache License 2.0 
#		http://www.apache.org/licenses/LICENSE-2.0.txt
#

####
# implementation of a suite class
####
template.testsuite.default.010=package ${testsuite.package.name};
template.testsuite.default.020=
template.testsuite.default.030=import org.junit.runner.RunWith;
template.testsuite.default.040=import org.junit.runners.Suite;
template.testsuite.default.041=${testsuite.imports}
template.testsuite.default.050=
template.testsuite.default.060=${marker.import.begin}
template.testsuite.default.070=${marker.import.end}
template.testsuite.default.080=
template.testsuite.default.090=${license}
template.testsuite.default.100=
template.testsuite.default.110=@RunWith( Suite.class )
template.testsuite.default.120=@Suite.SuiteClasses( {
template.testsuite.default.130=    ${marker.method.begin} SuiteClasses
template.testsuite.default.140=    ${marker.method.end} SuiteClasses
template.testsuite.default.150=    ${testsuite.add.testcases}
template.testsuite.default.160=    ${testsuite.add.testsuites}
template.testsuite.default.170=} )
template.testsuite.default.180=public class ${testsuite.class.name}
template.testsuite.default.190=  ${marker.extends_implements.begin}
template.testsuite.default.200=  ${marker.extends_implements.end}
template.testsuite.default.210={
template.testsuite.default.220=  ${marker.class.begin}
template.testsuite.default.230=  ${marker.class.end}
template.testsuite.default.240=}

####
# template imports a single testsuite
####
template.add.import.testsuite.default.010=import ${add.testsuite.name};


####
# template adds a single testcase to the suite
####
template.add.testcase.to.testsuite.default.010=${add.testcase.name}.class,
template.add.testcase.to.testsuite.last.010=${add.testcase.name}.class


####
# template adds a single testsuite to the suite
####
template.add.testsuite.to.testsuite.default.010=${add.testsuite.name}.class,
template.add.testsuite.to.testsuite.last.010=${add.testsuite.name}.class


####
# implementation of a test case
####
template.testcase.default.010=package ${testcase.package.name};
template.testcase.default.020=
template.testcase.default.030=import org.junit.Test;
template.testcase.default.040=import org.junit.After;
template.testcase.default.050=import org.junit.Before;
template.testcase.default.060=import org.junit.AfterClass;
template.testcase.default.070=import org.junit.BeforeClass;
template.testcase.default.080=import static junit.framework.Assert.assertEquals;
template.testcase.default.081=import org.junit.runner.RunWith;
template.testcase.default.082=import org.easetech.easytest.annotation.DataLoader;
template.testcase.default.083=import org.easetech.easytest.annotation.Param;
template.testcase.default.084=import org.easetech.easytest.loader.LoaderType;
template.testcase.default.085=import org.easetech.easytest.converter.ConverterManager;
template.testcase.default.086=import java.beans.PropertyEditorManager;
template.testcase.default.090=${marker.import.begin}
template.testcase.default.100=  ${testcase.imports}
template.testcase.default.110=${marker.import.end}
template.testcase.default.120=
template.testcase.default.130=${license}
template.testcase.default.140= 
template.testcase.default.141= @RunWith(org.easetech.easytest.runner.DataDrivenTestRunner.class)
template.testcase.default.142= @DataLoader(filePaths = {"${testcase.data.file.path}" }, loaderType = LoaderType.${testcase.loader.type})
template.testcase.default.150=public class ${testcase.class.name}
template.testcase.default.160=  ${marker.extends_implements.begin}
template.testcase.default.170=  ${marker.extends_implements.end}
template.testcase.default.180={
template.testcase.default.190=  ${marker.class.begin}
template.testcase.default.200=  ${testcase.instance.type} ${testcase.instance.name} = null;
template.testcase.default.210=  ${marker.class.end}
template.testcase.default.220=
template.testcase.default.230=  public ${testcase.class.name}() {
template.testcase.default.240=    ${marker.method.begin} ${testcase.class.name}
template.testcase.default.250=    ${marker.method.end} ${testcase.class.name}
template.testcase.default.260=  }
template.testcase.default.270=
template.testcase.default.280=  public ${testcase.instance.type} createInstance() throws Exception {
template.testcase.default.290=    ${marker.method.begin} testcase.createInstance
template.testcase.default.300=    return new ${testcase.instance.type}();
template.testcase.default.310=    ${marker.method.end} testcase.createInstance
template.testcase.default.320=  }
template.testcase.default.330=
template.testcase.default.340=  @Before public void before() throws Exception {
template.testcase.default.350=    ${marker.method.begin} testcase.before
template.testcase.default.360=    ${testcase.instance.name} = createInstance();
template.testcase.default.370=    ${marker.method.end} testcase.before
template.testcase.default.380=  }
template.testcase.default.390=
template.testcase.default.400=  @After public void after() throws Exception {
template.testcase.default.410=    ${marker.method.begin} testcase.after
template.testcase.default.420=    ${testcase.instance.name} = null;
template.testcase.default.430=    ${marker.method.end} testcase.after
template.testcase.default.440=  }
template.testcase.default.450=
template.testcase.default.460=  @BeforeClass public static void beforeClass() throws Exception {
template.testcase.default.470=    ${marker.method.begin} testcase.beforeClass
template.testcase.default.480=    ${testcase.register.editors}
template.testcase.default.481=    ${testcase.register.converters}
template.testcase.default.490=    ${marker.method.end} testcase.beforeClass
template.testcase.default.500=  }
template.testcase.default.510=
template.testcase.default.520=  @AfterClass public static void afterClass() throws Exception {
template.testcase.default.530=    ${marker.method.begin} testcase.afterClass
template.testcase.default.540=    
template.testcase.default.550=    ${marker.method.end} testcase.afterClass
template.testcase.default.560=  }
template.testcase.default.570=
template.testcase.default.580=  ${testcase.testmethods}
template.testcase.default.590=
template.testcase.default.600=  /**
template.testcase.default.610=    * JUnitDoclet moves marker to this method, if there is not match
template.testcase.default.620=    * for them in the regenerated code and if the marker is not empty.
template.testcase.default.630=    * This way, no test gets lost when regenerating after renaming.
template.testcase.default.640=    * Method ${testcase.method.unmatched} is supposed to be empty.
template.testcase.default.650=    * @throws Exception Any exception the enclosed code may throw.
template.testcase.default.660=    */
template.testcase.default.670=  @Test public void ${testcase.method.unmatched}() throws Exception {
template.testcase.default.680=    ${marker.method.begin} testcase.${testcase.method.unmatched}
template.testcase.default.690=    ${marker.method.end} testcase.${testcase.method.unmatched}
template.testcase.default.700=  }
template.testcase.default.710=}


####
# template for test methods in general (only accessors are handled differently)
####
template.testmethod.default.010=  @Test public void ${testmethod.name}() throws Exception {
template.testmethod.default.020=    ${marker.method.begin} ${method.name}
template.testmethod.default.030=    ${marker.method.end} ${method.name}
template.testmethod.default.040=  }
template.testmethod.default.050=

####
# template for test methods in general (only accessors are handled differently)
####
template.testmethod.easytest.010=  @Test 
template.testmethod.easytest.011=  public ${method.returntype} ${testmethod.name}(${method.signature}) throws Exception {
template.testmethod.easytest.020=    ${marker.method.begin} ${method.name}
template.testmethod.easytest.021=    ${method.returntype} returnValue = ${testcase.instance.name}.${method.name}(${method.parameter.values});
template.testmethod.easytest.022=    return returnValue; 
template.testmethod.easytest.030=    ${marker.method.end} ${method.name}
template.testmethod.easytest.040=  }
template.testmethod.easytest.050=

####
# template for test methods with void in general (only accessors are handled differently)
####
template.testmethodvoid.easytest.010=  @Test 
template.testmethodvoid.easytest.011=  public void ${testmethod.name}(${method.signature}) throws Exception {
template.testmethodvoid.easytest.020=    ${marker.method.begin} ${method.name}
template.testmethodvoid.easytest.021=    ${testcase.instance.name}.${method.name}(${method.parameter.values});
template.testmethodvoid.easytest.030=    ${marker.method.end} ${method.name}
template.testmethodvoid.easytest.040=  }
template.testmethodvoid.easytest.050=



####
# template for combined accessor test methods ("testSetGetValue", "testSetIsFlag")
####
template.testmethod.accessor.010=  @Test public void ${testmethod.name}() throws Exception {
template.testmethod.accessor.020=    ${marker.method.begin} ${accessor.set.name} ${accessor.get.name}
template.testmethod.accessor.030=    ${accessor.type.name}[] tests = {${accessor.tests}};
template.testmethod.accessor.040=
template.testmethod.accessor.050=    for (int i = 0; i < tests.length; i++) {
template.testmethod.accessor.060=      ${testcase.instance.name}.${accessor.set.name}(tests[i]);
template.testmethod.accessor.070=      assertEquals(tests[i], ${testcase.instance.name}.${accessor.get.name}());
template.testmethod.accessor.080=    }
template.testmethod.accessor.090=    ${marker.method.end} ${accessor.set.name} ${accessor.get.name}
template.testmethod.accessor.100=  }
template.testmethod.accessor.110=


####
# default test values for the most basic types
####
accessor.tests.boolean=true, false
accessor.tests.java.lang.Boolean=new Boolean(true), new Boolean(false), null
accessor.tests.byte=Byte.MIN_VALUE, -1, 0, 1, Byte.MAX_VALUE
accessor.tests.java.lang.Byte=new Byte(Byte.MIN_VALUE), new Byte((byte)-1), new Byte((byte)0), new Byte((byte)1), new Byte(Byte.MAX_VALUE), null
accessor.tests.char=' ', 'a', 'A', 'z', 'Z', '\\n', '?'
accessor.tests.java.lang.Character=new Character(' '), new Character('a'), new Character('A'), new Character('z'), new Character('Z'), new Character('�'), new Character('\\n'), new Character('�'), new Character('?'), null
accessor.tests.double=Double.MIN_VALUE, -1.0, -0.5, 0.0, 0.5, 1.0, Double.MAX_VALUE
accessor.tests.java.lang.Double=new Double(Double.MIN_VALUE), new Double(-1.0d), new Double(-0.5d), new Double(0.0d), new Double(0.5d), new Double(1.0d), new Double(Double.MAX_VALUE), new Double(Double.NaN), null
accessor.tests.float=Float.MIN_VALUE, -1.0f, -0.5f, 0.0f, 0.5f, 1.0f, Float.MAX_VALUE
accessor.tests.java.lang.Float=new Float(Float.MIN_VALUE), new Float(-1.0f), new Float(-0.5f), new Float(0.0f), new Float(0.5f), new Float(1.0f), new Float(Float.MAX_VALUE), new Float(Float.NaN), null
accessor.tests.int=Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE
accessor.tests.java.lang.Integer=new Integer(Integer.MIN_VALUE), new Integer(-1), new Integer(0), new Integer(1), new Integer(Integer.MAX_VALUE), null
accessor.tests.long=Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE
accessor.tests.java.lang.Long=new Long(Long.MIN_VALUE), new Long(-1), new Long(0), new Long(1), new Long(Long.MAX_VALUE), null
accessor.tests.short=Short.MIN_VALUE, -1, 0, 1, Short.MAX_VALUE
accessor.tests.java.lang.Short=new Short(Short.MIN_VALUE), new Short((short)-1), new Short((short)0), new Short((short)1), new Short(Short.MAX_VALUE), null
accessor.tests.java.lang.String=\"\", \" \", \"a\", \"A\", \"0123456789\", \"012345678901234567890\", \"\\n\", null
accessor.tests.java.util.Date=new java.util.Date(), new java.util.Date(0), null
# feel free to add default tests for your own classes here.
# ...
# otherwise the default is used
template.accessor.tests.default.010=new ${accessor.type.name}(), null

template.accessor.tests.enum.010=${accessor.type.name}.${accessor.enum.first},${accessor.type.name}.${accessor.enum.last}, null

template.accessor.tests.array.010=new ${accessor.type.name}[0] , null


####
#
####

template.licence.010=/**
template.licence.020= * Generated by EasyTest CodeGen, a tool provided by
template.licence.030= * EaseTech org Under Apache License 2.0 
template.licence.040= * http://www.apache.org/licenses/LICENSE-2.0.txt
template.licence.050= */ 


####
# some general constants
####

#testsuite.class.name=AllTests

testsuite.instance.name=suite

testcase.method.unmatched=testVault

testsource.indent.width=4

####
# implementation of a converter for complex type(DTO, class etc..) parameters
####
template.converter.default.010=package ${testcase.package.name};
template.converter.default.020=
template.converter.default.030=import org.easetech.easytest.converter.AbstractConverter;
template.converter.default.040=import java.util.Map;
template.converter.default.050=import org.easetech.easytest.util.GeneralUtil;
template.converter.default.090=${marker.import.begin}
template.converter.default.100=  ${converter.imports}
template.converter.default.110=${marker.import.end}
template.converter.default.120=
template.converter.default.130=${license}
template.converter.default.140= 
template.converter.default.150=public class ${converter.class.name} extends AbstractConverter<${converter.instance.type}> {
template.converter.default.170=  
template.converter.default.180=  	//@Override
template.converter.default.190=  	public ${converter.instance.type} convert(Map<String, Object> convertFrom) {
template.converter.default.200=  					${converter.instance.type} ${converter.instance.name} = null;
template.converter.default.210=  
template.converter.default.220=						if (convertFrom != null) {
template.converter.default.230=  						${converter.instance.name} = new ${converter.instance.type}();
template.converter.default.240=    					${converter.setters}
template.converter.default.250=    				}
template.converter.default.260=  					return ${converter.instance.name};
template.converter.default.270=  	}
template.converter.default.280=}


####
# template for converters setters for String types
####
template.converter.setmethodnonprim.010=  ${converter.instance.name}.${converter.instance.attribute.setter.name}((${converter.instance.attribute.type})GeneralUtil.convertToTargetType(${converter.instance.attribute.type}.class, convertFrom.get("${converter.instance.attribute.name}"))); 

####
# template for converters setters for other than String types
####
template.converter.setmethodprim.010=  if(convertFrom.get("${converter.instance.attribute.name}") != null) {
template.converter.setmethodprim.020=  		${converter.instance.name}.${converter.instance.attribute.setter.name}((${converter.instance.attribute.type.wrapper})GeneralUtil.convertToTargetType(${converter.instance.attribute.type}.class, convertFrom.get("${converter.instance.attribute.name}"))); 
template.converter.setmethodprim.030=	}

####
# template for converters setters for custom editor for enum,timestamp,date,time etc.. types
####
template.converter.setmethodeditor.010=  if(convertFrom.get("${converter.instance.attribute.name}") != null) {
template.converter.setmethodeditor.020=  		${editor.class.name} editor = new ${editor.class.name}();
template.converter.setmethodeditor.030=  		editor.setAsText((String)convertFrom.get("${converter.instance.attribute.name}"));
template.converter.setmethodeditor.040=  		${converter.instance.name}.${converter.instance.attribute.setter.name}((${converter.instance.attribute.type})editor.getValue());
template.converter.setmethodeditor.050=  	}	


####
# template for converters setters for complex field types where converter will be created
####
template.converter.setmethodconverter.010=  ${converter.instance.name}.${converter.instance.attribute.setter.name}(new ${converter.instance.attribute.converter}().convert(convertFrom));

####
# template for non-existing converters setters for complex field types where converter need to be created manually
####
template.converter.setmethodnoconverter.010=  // TODO : create converter for below field manually and enable setter 
template.converter.setmethodnoconverter.020=  //${converter.instance.name}.${converter.instance.attribute.setter.name}(new ${converter.instance.attribute.converter}().convert(convertFrom)); 


####
# implementation of a editor for enum,timestamp,date,time etc.. parameters
####
template.editor.default.010=package ${testcase.package.name};
template.editor.default.020=
template.editor.default.030=import java.beans.PropertyEditorSupport;
template.editor.default.040=import ${editor.instance.type.qualifiedname};
template.editor.default.090=${marker.import.begin}
#template.editor.default.100=  // make sure to add your own imports here
template.editor.default.110=${marker.import.end}
template.editor.default.120=
template.editor.default.130=${license}
template.editor.default.140= 
template.editor.default.150=public class ${editor.class.name} extends PropertyEditorSupport {
template.editor.default.170=  
template.editor.default.180=  	@Override
template.editor.default.190=  	public void setAsText(String s) {
template.editor.default.240=    					${editor.setvalue}
template.editor.default.270=  	}
template.editor.default.280=}

####
# template for editor setvalue for enum types
####
template.editor.setvalueenum.010=  setValue(${editor.instance.type}.get${editor.instance.type}(s));

####
# template for editor setvalue for enum types
####
template.editor.setvaluejodadatetime.010=  setValue(new ${editor.instance.type}(s));



####
# template for registering converters
####
template.converter.register.010=  ConverterManager.registerConverter(${converter.class.name}.class);

####
# template for registering PropertyEditors
####
template.editor.register.010=  PropertyEditorManager.registerEditor(${editor.instance.type}.class, ${editor.class.name}.class);

####
# template for importing parameter types if they are not simple type
####
template.class.import.010=  import ${param.class.type};

####
# Filter include or exclude properties, filter exclude will have priority
# so, keep only one property either include or exclude
# exclude : Method source will be checked for these exclude strings, if found then test method generation will not happen for that method
# include : Method source will be checked for these include strings, test method generation will happen only when one of these include strings exist.
####
#filter.exclude =  PreparedStatement
#filter.include =  itemList


####
# Overwrite existing test data
# If this value is YES, then it removes the existing test data and add newly generated test data
# If this value is NO, then it appends the existing test data to newly generated test data
# Default value is NO. Even if property doesn not exist then value will be treated as NO
####
overwrite.existing.test.data =  NO

####
# Overwrite converters. this feature is useful if converters are modified by users and they don't want to overwrite them later.
# If this value is YES, then it replaces the existing converters with newly generated converters
# If this value is NO, then it keeps the existing converters. 
# Default value is YES. Even if property doesn not exist then value will be treated as YES
####
overwrite.existing.converters =  YES

####
# Customised test case extension
# if not provided default value is "Test"
####
testcase.extension =  Test

####
# Customised test suite extension
# if not provided default value is "Suite"
####
testsuite.extension =  Suite
